package com.app.products.services;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.app.products.models.Category;
import com.app.products.models.Product;
import com.app.products.repositories.CategoryRepository;


public class CategoryService {
	
	private final CategoryRepository categoryRepo;

	
	
	
	public CategoryService(CategoryRepository categoryRepo) {
		super();
		this.categoryRepo = categoryRepo;
	}

	// Get All categories 
	public List<Category> getAllProducts(){
		return categoryRepo.findAll();
	}

	
	
	//get Category by Id
	public Category getProductById(Long id) {
		Optional<Category> optionalCategory = categoryRepo.findById(id);
		if(optionalCategory.isPresent()) {
			return optionalCategory.get();
		}else {
			return 	null;
		}
			
	}
	
	
	
	// Create a category
	public Category saveCategory(Category category) {
		return categoryRepo.save(category);
	}
	
	
	
	// update a category
	public Category updateCategory(Category category) {
		return categoryRepo.save(category);
	}
	
	
	// product can not be deleted
	// it can be not active
	// if id is present in optional result findById(id) we set Active to false and save the product.
	
	public void productActivation(Long id) {
		productRepo.findById(id).ifPresent(p->{
			p.setIsActive(false);
			productRepo.save(p);
		});
	}
	
	

}
